package ro.catalin.sorting.Lists;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class StringLengthComparator implements Comparator<String>{

	@Override
	public int compare(String s1, String s2)
	{
		int leng1=s1.length();
		int leng2=s2.length();
		
		if(leng1>leng2){
			return 1;
		}
		else if(leng1<leng2){
			return -1;
		}
		else
		return 0;
	}
	
}

class AlphabeticalComparator implements Comparator<String>{

	@Override
	public int compare(String s1, String s2)
	{
		return s1.compareTo(s2);
	}
	
}
class ReverseAlphabeticalComparator implements Comparator<String>{

	@Override
	public int compare(String s1, String s2)
	{
		return (-1)*s1.compareTo(s2);
	}
	
}
class Person{
	private int id;
	private String name;
	
	public Person(int id,String name){
		this.id=id;
		this.name=name;
		
	}

	@Override
	public String toString()
	{
		return name;
	}

	public int getId()
	{
		return id;
	}

	public void setId(int id)
	{
		this.id = id;
	}

	public String getName()
	{
		return name;
	}

	public void setName(String name)
	{
		this.name = name;
	}
}
public class MainApp
{

	public static void main(String[] args)
	{
			List<String> animals=new ArrayList<String>();
			
			
			animals.add("elephant");
			animals.add("tiger");
			animals.add("lion");
			animals.add("cat");
			animals.add("snake");
			animals.add("mongoose");
			
			
			Collections.sort(animals,new ReverseAlphabeticalComparator());
			
			
			for(String animal:animals){
				System.out.println(animal);
			}
			
			List<Integer> numbers=new ArrayList<Integer>();
			
			numbers.add(3);
			numbers.add(36);
			numbers.add(64);
			numbers.add(83);
			numbers.add(73);
			numbers.add(13);
			numbers.add(0);
			
			Collections.sort(numbers,new Comparator<Integer>(){

				@Override
				public int compare(Integer num1, Integer num2)
				{
					return -num1.compareTo(num2);
				}
				
			});
			
			for(Integer number:numbers){
				System.out.println(number);
			}
			
			
			List<Person> people=new ArrayList<Person>();
			people.add(new Person(1,"joe"));
			people.add(new Person(2,"Sue"));
			people.add(new Person(3,"Bob"));
			people.add(new Person(4,"Claire"));
			
			
			Collections.sort(people,new Comparator<Person>(){

				@Override
				public int compare(Person p1, Person p2)
				{
					return p1.getName().compareTo(p2).
				}
				
			});
			
			for(Person p:people){
				System.out.println(p);
			}
			
	}

}
